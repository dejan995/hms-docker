version: "3.5"
services:
  # Lidarr - Music Manager
  lidarr:
    container_name: ${CONTAINER_NAME_LIDARR}
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIME_ZONE}
    image: linuxserver/lidarr:latest
    networks:
      - network
    ports:
      - ${LIDARR_PORT}:8686
    restart: unless-stopped
    volumes:
      - ${MUSIC_FOLDER}:/music
      - /mnt/docker/lidarr:/config
      - ${DOWNLOADS_FOLDER}:/downloads
  # Bazarr - Subtitles Manager    
  bazarr:
    container_name: ${CONTAINER_NAME_BAZARR}
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIME_ZONE}
    image: linuxserver/bazarr:latest
    networks:
      - network
    ports:
      - ${BAZARR_PORT}:6767
    restart: unless-stopped
    volumes:
      - ${TV_FOLDER}:/tv:rw
      - ${MOVIES_FOLDER}:/movies:rw
      - /mnt/docker/bazarr:/config:rw
  # Deluge - BitTorrent Client    
  deluge:
    container_name: ${CONTAINER_NAME_DELUGE}
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIME_ZONE}
    expose:
      - 58846/tcp
      - 58946/tcp
      - 58946/udp
    ports:
      - ${DELUGE_PORT}:8112/tcp
    image: linuxserver/deluge:latest
    networks:
      - network
    restart: unless-stopped
    volumes:
      - /mnt/docker/deluge:/config
      - ${DOWNLOADS_FOLDER}:/downloads
  # Jellyfin - Media Server    
  Jellyfin:
    container_name: ${CONTAINER_NAME_JELLYFIN}
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIME_ZONE}
    image: linuxserver/jellyfin:latest
    networks:
      - network
    ports:
      - ${JELLYFIN_PORT}:8096
    restart: unless-stopped
    volumes:
      - /mnt/docker/jellyfin:/config
      - ${MOVIES_FOLDER}:/movies
      - ${MUSIC_FOLDER}:/music
      - ${TV_FOLDER}:/tv
      - ${VIDEOS_FOLDER}:/videos
  # Jackett - Torrent Indexer    
  jackett:
    container_name: ${CONTAINER_NAME_JACKETT}
    environment:
      - TZ=${TIME_ZONE}
    image: linuxserver/jackett:latest
    networks:
      - network
    ports:
      - ${JACKETT_PORT}:9117
    restart: unless-stopped
    volumes:
      - ${TORRENTS_FOLDER}:/downloads
      - /mnt/docker/jackett:/config
  # Portainer - Docker Manager    
  portainer:
    container_name: ${CONTAINER_NAME_PORTAINER}
    environment: 
      - TZ=${TIME_ZONE}
    image: portainer/portainer-ce:latest
    networks:
      - network
    ports:
      - ${PORTAINER_PORT}:9000
    restart: unless-stopped
    volumes:
      - /mnt/docker/portainer:/data:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
  # Radarr - Movies Manager    
  radarr:
    container_name: ${CONTAINER_NAME_RADARR}
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIME_ZONE}
    image: linuxserver/radarr:latest
    networks:
      - network
    ports:
      - ${RADARR_PORT}:7878
    restart: unless-stopped
    volumes:
      - ${MOVIES_FOLDER}:/movies
      - ${DOWNLOADS_FOLDER}:/downloads
      - /mnt/docker/radarr:/config
  # Sonarr - TV Shows Manager    
  sonarr:
    container_name: ${CONTAINER_NAME_SONARR}
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIME_ZONE}
    image: linuxserver/sonarr:latest
    networks:
      - network
    ports:
      - ${SONARR_PORT}:8989
    restart: unless-stopped
    volumes:
      - /mnt/docker/sonarr:/config
      - ${DOWNLOADS_FOLDER}:/downloads
      - ${TV_FOLDER}:/tv
  # YouTube Downloader/Material - YouTube Downloader   
  youtubedl-material:
    image: tzahi12345/youtubedl-material:nightly 
    container_name: ${CONTAINER_NAME_YTDLM}
    restart: unless-stopped
    networks:
      - network
    environment:
      - UID=${USER_ID}
      - GIG=${GROUP_ID}
    volumes:
      - /mnt/docker/ytdlm:/app/appdata
      - ${YTDLM_FOLDER}/video:/app/video
      - ${YTDLM_FOLDER}/audio:/app/audio
      - ${YTDLM_FOLDER}/subscriptions:/app/subscriptions
      - ${YTDLM_FOLDER}/users:/app/users
    ports:
      - ${YTDLM_PORT}:17442
  # WatchTower - Docker Container Update Service    
  watchtower:
    container_name: watchtower
    environment:
      - TZ=${TIME_ZONE}
    image: v2tec/watchtower
    networks:
      - network
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
  # MusicBrainz Picard - Music Tagger
  picard:
    container_name: ${CONTAINER_NAME_PICARD}
    image: mikenye/picard
    networks:
      - network
    ports:
      - ${PICARD_PORT}:5800/tcp
    volumes:
      - /mnt/docker/picard:/config:rw
      - ${MUSIC_FOLDER}:/storage:rw
  # Heimdall - Access Dashboard    
  heimdall:
    container_name: ${CONTAINER_NAME_HEIMDALL}
    environment: 
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIME_ZONE}
    image: linuxserver/heimdall
    networks: 
      - network
    ports: 
      - ${HEIMDALL_PORT}:80
    restart: unless-stopped
    volumes:
      - /mnt/docker/heimdall:/config
  # Nginx Proxy Manager    
  nginx-proxy-manager:
    image: jlesage/nginx-proxy-manager
    container_name: ${CONTAINER_NAME_NPM}
    restart: unless-stopped
    networks:
      - network
    ports:
      - "${NPM_DASH_PORT}:8181"
      - "80:8080"
      - "443:4443"
    volumes:
      - /mnt/docker/npm:/config:rw
  # Samba WebUI
  smb-webmin:
    image: dejan995/smbwebmin-docker:latest
    container_name: ${CONTAINER_NAME_SAMBA}
    restart: unless-stopped
    hostname: ${SAMBA_HOSTNAME}
    networks:
      - network
    ports:
        - ${SAMBA_WEBUI_PORT}:10000
        - 137:137/udp
        - 138:138/udp
        - 139:139
        - 445:445
    volumes: 
        - /mnt/docker/smbwebmin:/data
        - ${ROOT_SHARE_FOLDER}:/mnt
    environment:
        - WEBMIN_LOGIN=${WEBMIN_LOGIN} 
        - WEBMIN_PASSWORD=${WEBMIN_PASSWORD}
  # Filemin
  filemin:
    image: dejan995/filemin-docker:latest
    container_name: ${CONTAINER_NAME_FILEMIN}
    restart: unless-stopped
    networks:
        - network
    ports:
        - ${FILEMIN_PORT}:10000
    volumes: 
        - /mnt/docker/filemin:/data
        - ${ROOT_SHARE_FOLDER}:/mnt
    environment:
        - WEBMIN_LOGIN=${WEBMIN_LOGIN} 
        - WEBMIN_PASSWORD=${WEBMIN_PASSWORD}
  # Readarr - Books Manager
  readarr:
    image: vcxpz/readarr:latest
    container_name: ${CONTAINER_NAME_READARR}
    restart: unless-stopped
    networks: 
        - network
    ports:
        - ${READARR_PORT}:8787
    volumes: 
        - /mnt/docker/readarr:/config
        - ${BOOKS_FOLDER}:/books
        - ${DOWNLOADS_FOLDER}:/downloads
  # Ubooquity - Books & Comics Reader  
  ubooquity:
    image: ghcr.io/linuxserver/ubooquity:latest
    container_name: ${CONTAINER_NAME_UBOOQUITY)
    restart: unless-stopped
    networks: 
        - network
    environment:
        - PUID=${USER_ID}
        - PGID=${GROUP_ID}
        - TZ=${TIME_ZONE}
        - MAXMEM=${MAX_MEM}
    volumes:
        - /mnt/docker/ubooquity:/config
        - ${BOOKS_FOLDER}:/books
        - ${COMICS_FOLDER}:/comics
        - ${DOWNLOADS_FOLDER}:/files
    ports:
        - ${UBOOQUITY_WEBUI_PORT}:2202
        - ${UBOOQUITY_ADMIN_PORT}:2203
  # Deemix - Deezer Music Downloader
  deemix:
    image: registry.gitlab.com/bockiii/deemix-docker:latest
    container_name: ${CONTAINER_NAME_DEEMIX}
    restart: unless-stopped
    networks:
        - network
    environment:
        - PUID=${USER_ID}
        - PGID=${GROUP_ID}
    volumes:
        - /mnt/docker/deemix:/config
        - ${DOWNLOADS_FOLDER}:/downloads
    ports:
        - ${DEEMIX_PORT}:6595
  # Syncthing - Sync Manager
  syncthing:
    image: linuxserver/syncthing:latest
    container_name: ${CONTAINER_NAME_SYNC}
    restart: unless-stopped
    networks:
        - network
    environment:
        - PUID=${USER_ID}
        - PGID=${GROUP_ID}
    volumes:
        - /mnt/docker/syncthing:/config
        - ${ROOT_SHARE_FOLDER}:/sync
    ports:
        - ${SYNC_WEBUI_PORT}:8384
        - ${SYNC_PORT1}:21027
        - ${SYNC_PORT2}:22000
  # OAuth2-Proxy - Authentication Provider      
  oauth2-proxy:
    container_name: ${CONTAINER_NAME_OAUTH2}
    image: bitnami/oauth2-proxy:latest
    restart: unless-stopped
    command: --config /oauth2-proxy.cfg
    ports:
        - ${OAUTH2_PORT_1}:8080
        - ${OAUTH2_PORT_2}:4180
    volumes:
        - ./oauth2-proxy.cfg:/oauth2-proxy.cfg
    environment:
        - OAUTH2_PROXY_SESSION_STORE_TYPE=redis
        - OAUTH2_PROXY_REDIS_CONNECTION_URL=redis://${REDIS_IP_HOST}:${REDIS_PORT}/0
  # Redis - Database and Cache (used by OAuth2-Proxy)
  redis:
    container_name: ${CONTAINER_NAME_REDIS}
    image: redis:latest
    restart: unless-stopped
    ports:
        - ${REDIS_PORT}:6379
    volumes:
        - /mnt/docker/redis:/data    
   
# Create network for the applications
networks:
  network:
    name: ${NETWORK_NAME}
    driver: bridge